/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Mock_ERC721,
  Mock_ERC721Interface,
} from "../../../src/mocks/Mock_ERC721";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AccountBalanceOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "BalanceQueryForZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFromIncorrectOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToNonERC721ReceiverImplementer",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isApproved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "result",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "result",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isApproved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000ba338038062000ba3833981016040819052620000349162000145565b60005b815181101562000084576200006f338383815181106200005b576200005b6200020e565b60200260200101516200008c60201b60201c565b806200007b8162000224565b91505062000037565b50506200024c565b8160601b60601c915080600052673ec412a9852d173d60c11b601c5260206000208101810180548060601b15620000cb5763c991cbb16000526004601cfd5b831790556000829052601c600c20805460010163ffffffff81168402620001015767ea553b3401336cea841560021b526004601cfd5b9055808260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8138a45050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200015957600080fd5b82516001600160401b03808211156200017157600080fd5b818501915085601f8301126200018657600080fd5b8151818111156200019b576200019b6200012f565b8060051b604051601f19603f83011681018181108582111715620001c357620001c36200012f565b604052918252848201925083810185019188831115620001e257600080fd5b938501935b828510156200020257845184529385019392850192620001e7565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200024557634e487b7160e01b600052601160045260246000fd5b5060010190565b610947806200025c6000396000f3fe6080604052600436106100c25760003560e01c80636352211e1161007f578063a22cb46511610059578063a22cb46514610244578063b88d4fde14610264578063c87b56dd14610277578063e985e9c5146102ce57600080fd5b80636352211e146101c957806370a08231146101e957806395d89b411461021757600080fd5b806301ffc9a7146100c757806306fdde0314610119578063081812fc14610156578063095ea7b31461018e57806323b872dd146101a357806342842e0e146101b6575b600080fd5b3480156100d357600080fd5b506101046100e23660046106d7565b6301ffc9a760e09190911c9081146380ac58cd821417635b5e139f9091141790565b60405190151581526020015b60405180910390f35b34801561012557600080fd5b5060408051808201909152600b81526a4d6f636b5f45524337323160a81b60208201525b6040516101109190610708565b34801561016257600080fd5b50610176610171366004610756565b610304565b6040516001600160a01b039091168152602001610110565b6101a161019c366004610786565b610343565b005b6101a16101b13660046107b0565b610352565b6101a16101c43660046107b0565b610453565b3480156101d557600080fd5b506101766101e4366004610756565b610480565b3480156101f557600080fd5b506102096102043660046107ec565b6104be565b604051908152602001610110565b34801561022357600080fd5b506040805180820190915260048152634d37323160e01b6020820152610149565b34801561025057600080fd5b506101a161025f366004610807565b6104f9565b6101a1610272366004610843565b61054f565b34801561028357600080fd5b50610149610292366004610756565b604080517368747470733a2f2f6578616d706c652e636f6d2f60601b602082015260348082019390935281518082039093018352605401905290565b3480156102da57600080fd5b506101046102e93660046108de565b601c52670a5a2e7a000000006008526000526030600c205490565b600081600052673ec412a9852d173d60c11b601c52602060002082018201805460601b6103395763ceea21b66000526004601cfd5b6001015492915050565b61034e3383836105aa565b5050565b6000818152673ec412a9852d173d60c11b3317601c52602090208101810180546001600160a01b0394851694938416938116919082861483026103a45767ceea21b6a1148100831560021b526004601cfd5b8560005281600101549250823314863314176103d2576030600c20546103d257634b6e7f186000526004601cfd5b82156103e057600082600101555b85851818905550601c600c8181208054600019019055600084905220805460010163ffffffff811684026104235767ea553b3401336cea841560021b526004601cfd5b90558082847fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600038a45b505050565b61045e838383610352565b813b1561044e5761044e8383836040518060200160405280600081525061064b565b6000818152673ec412a9852d173d60c11b601c526020902081018101546001600160a01b0316806104b95763ceea21b66000526004601cfd5b919050565b6000816104d357638f4eb6046000526004601cfd5b673ec412a9852d173d60c11b601c528160005263ffffffff601c600c2054169050919050565b801515905081601c52670a5a2e7a0000000060085233600052806030600c2055806000528160601b60601c337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160206000a35050565b61055a858585610352565b833b156105a3576105a385858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061064b92505050565b5050505050565b60001960601c828116925083811693508160005283673ec412a9852d173d60c11b17601c52602060002082018201805482169150816105f15763ceea21b66000526004601cfd5b81851485151761061757816000526030600c205461061757634b6e7f186000526004601cfd5b6001018390558183827f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600038a450505050565b60405163150b7a028082523360208301528560601b60601c604083015283606083015260808083015282518060a08401528015610692578060c08401826020870160045afa505b60208360a48301601c860160008a5af16106b5573d156106b5573d6000843e3d83fd5b508060e01b8251146106cf5763d1a57ed66000526004601cfd5b505050505050565b6000602082840312156106e957600080fd5b81356001600160e01b03198116811461070157600080fd5b9392505050565b600060208083528351808285015260005b8181101561073557858101830151858201604001528201610719565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561076857600080fd5b5035919050565b80356001600160a01b03811681146104b957600080fd5b6000806040838503121561079957600080fd5b6107a28361076f565b946020939093013593505050565b6000806000606084860312156107c557600080fd5b6107ce8461076f565b92506107dc6020850161076f565b9150604084013590509250925092565b6000602082840312156107fe57600080fd5b6107018261076f565b6000806040838503121561081a57600080fd5b6108238361076f565b91506020830135801515811461083857600080fd5b809150509250929050565b60008060008060006080868803121561085b57600080fd5b6108648661076f565b94506108726020870161076f565b935060408601359250606086013567ffffffffffffffff8082111561089657600080fd5b818801915088601f8301126108aa57600080fd5b8135818111156108b957600080fd5b8960208285010111156108cb57600080fd5b9699959850939650602001949392505050565b600080604083850312156108f157600080fd5b6108fa8361076f565b91506109086020840161076f565b9050925092905056fea2646970667358221220af2c772c48e978f7d722c7f178725a4b208fdceaffa2f655b8cec102d8eb09e564736f6c63430008140033";

type Mock_ERC721ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Mock_ERC721ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Mock_ERC721__factory extends ContractFactory {
  constructor(...args: Mock_ERC721ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _tokenIds: BigNumberish[],
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_tokenIds, overrides || {});
  }
  override deploy(
    _tokenIds: BigNumberish[],
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_tokenIds, overrides || {}) as Promise<
      Mock_ERC721 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Mock_ERC721__factory {
    return super.connect(runner) as Mock_ERC721__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Mock_ERC721Interface {
    return new Interface(_abi) as Mock_ERC721Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): Mock_ERC721 {
    return new Contract(address, _abi, runner) as unknown as Mock_ERC721;
  }
}
