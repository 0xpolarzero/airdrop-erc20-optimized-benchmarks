/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  BytecodeDrop,
  BytecodeDropInterface,
} from "../../src/BytecodeDrop";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_totalAmount",
        type: "uint256",
      },
    ],
    name: "airdropERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b507f59351559341117600d57601a565b5959fd5b6000526004601cfd5b593560e01c60009081527f6382947abe14602d575b3434fd5b6024356004016044356004018082038135836020526d3581036055576004357f23b872dd60901b60405275345233600452306024526064356044523434606434346060526b855af1156055577fa9059cbb60a01b6080527734528160051b60200185018560015b90602001808303156060a0527fdc5790813560045285820335602452343460443434885af11660b6565b15605560c05263573434f360e01b60e05260e490f3fe";

type BytecodeDropConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BytecodeDropConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BytecodeDrop__factory extends ContractFactory {
  constructor(...args: BytecodeDropConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BytecodeDrop & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BytecodeDrop__factory {
    return super.connect(runner) as BytecodeDrop__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BytecodeDropInterface {
    return new Interface(_abi) as BytecodeDropInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BytecodeDrop {
    return new Contract(address, _abi, runner) as unknown as BytecodeDrop;
  }
}
