/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "AirdropClaimMapping",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AirdropClaimMapping__factory>;
    getContractFactory(
      name: "AirdropClaimMerkle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AirdropClaimMerkle__factory>;
    getContractFactory(
      name: "AirdropClaimSignature",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AirdropClaimSignature__factory>;
    getContractFactory(
      name: "Airdrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Airdrop__factory>;
    getContractFactory(
      name: "BytecodeDrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BytecodeDrop__factory>;
    getContractFactory(
      name: "Disperse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Disperse__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "GasliteDrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasliteDrop__factory>;
    getContractFactory(
      name: "Mock_ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mock_ERC20__factory>;
    getContractFactory(
      name: "Mock_ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mock_ERC721__factory>;

    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ECDSA",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "AirdropClaimMapping",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AirdropClaimMapping>;
    getContractAt(
      name: "AirdropClaimMerkle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AirdropClaimMerkle>;
    getContractAt(
      name: "AirdropClaimSignature",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AirdropClaimSignature>;
    getContractAt(
      name: "Airdrop",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Airdrop>;
    getContractAt(
      name: "BytecodeDrop",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BytecodeDrop>;
    getContractAt(
      name: "Disperse",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Disperse>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "GasliteDrop",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GasliteDrop>;
    getContractAt(
      name: "Mock_ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Mock_ERC20>;
    getContractAt(
      name: "Mock_ERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Mock_ERC721>;

    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "AirdropClaimMapping",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AirdropClaimMapping>;
    deployContract(
      name: "AirdropClaimMerkle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AirdropClaimMerkle>;
    deployContract(
      name: "AirdropClaimSignature",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AirdropClaimSignature>;
    deployContract(
      name: "Airdrop",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Airdrop>;
    deployContract(
      name: "BytecodeDrop",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BytecodeDrop>;
    deployContract(
      name: "Disperse",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Disperse>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "GasliteDrop",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasliteDrop>;
    deployContract(
      name: "Mock_ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Mock_ERC20>;
    deployContract(
      name: "Mock_ERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Mock_ERC721>;

    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "ECDSA",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "AirdropClaimMapping",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AirdropClaimMapping>;
    deployContract(
      name: "AirdropClaimMerkle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AirdropClaimMerkle>;
    deployContract(
      name: "AirdropClaimSignature",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AirdropClaimSignature>;
    deployContract(
      name: "Airdrop",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Airdrop>;
    deployContract(
      name: "BytecodeDrop",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BytecodeDrop>;
    deployContract(
      name: "Disperse",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Disperse>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "GasliteDrop",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasliteDrop>;
    deployContract(
      name: "Mock_ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Mock_ERC20>;
    deployContract(
      name: "Mock_ERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Mock_ERC721>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
